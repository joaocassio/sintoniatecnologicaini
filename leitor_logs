<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Classificação de Times Free Fire</title>
    <style>
        table {
            width: 100%;
            border-collapse: collapse;
        }
        th, td {
            padding: 8px;
            text-align: left;
            border: 1px solid #ddd;
        }
        th {
            background-color: #f2f2f2;
        }
    </style>
</head>
<body>
    <h2>Classificação de Times - Free Fire</h2>
    <input type="file" id="logFile" multiple>
    <button onclick="processFiles()">Enviar Arquivos</button>

    <h3>Classificação</h3>
    <table>
        <thead>
            <tr>
                <th>Time</th>
                <th>Pontuação Total</th>
                <th>Total de Kills</th>
                <th>Booyah (1º Lugar)</th>
            </tr>
        </thead>
        <tbody id="classificationTable">
        </tbody>
    </table>

    <script>
        function processFiles() {
            const files = document.getElementById('logFile').files;
            if (files.length === 0) {
                alert("Por favor, selecione um ou mais arquivos .log.");
                return;
            }

            let teamData = {}; // Armazena os dados de cada time

            // Função para processar cada arquivo individualmente
            Array.from(files).forEach(file => {
                const reader = new FileReader();
                reader.onload = function(event) {
                    processFile(event.target.result, teamData);
                    updateTable(teamData); // Atualiza a tabela a cada arquivo lido
                };
                reader.readAsText(file);
            });
        }

        // Função para processar o conteúdo de um arquivo .log
        function processFile(content, teamData) {
            const lines = content.split('\n');
            let currentTeam = '';

            lines.forEach(line => {
                line = line.trim();

                if (line.startsWith('TeamName:')) {
                    currentTeam = line.split(': ')[1];
                } else if (line.startsWith('KillScore:')) {
                    const killScore = parseInt(line.split(': ')[1]);
                    if (!teamData[currentTeam]) {
                        teamData[currentTeam] = { totalScore: 0, totalKills: 0, booyah: 0 };
                    }
                    teamData[currentTeam].totalKills += killScore;
                } else if (line.startsWith('TotalScore:')) {
                    const totalScore = parseInt(line.split(': ')[1]);
                    if (!teamData[currentTeam]) {
                        teamData[currentTeam] = { totalScore: 0, totalKills: 0, booyah: 0 };
                    }
                    teamData[currentTeam].totalScore += totalScore;
                } else if (line.startsWith('Rank: 1')) {
                    teamData[currentTeam].booyah += 1;
                }
            });
        }

        // Função para atualizar a tabela HTML
        function updateTable(teamData) {
            const tableBody = document.getElementById('classificationTable');
            tableBody.innerHTML = ''; // Limpa a tabela antes de atualizá-la

            // Classifica os times primeiro pela pontuação total, depois pelos kills em caso de empate
            const sortedTeams = Object.keys(teamData).sort((a, b) => {
                if (teamData[b].totalScore === teamData[a].totalScore) {
                    return teamData[b].totalKills - teamData[a].totalKills;
                }
                return teamData[b].totalScore - teamData[a].totalScore;
            });

            // Adiciona as linhas à tabela
            sortedTeams.forEach(team => {
                const row = document.createElement('tr');

                const teamNameCell = document.createElement('td');
                teamNameCell.textContent = team;
                row.appendChild(teamNameCell);

                const totalScoreCell = document.createElement('td');
                totalScoreCell.textContent = teamData[team].totalScore;
                row.appendChild(totalScoreCell);

                const totalKillsCell = document.createElement('td');
                totalKillsCell.textContent = teamData[team].totalKills;
                row.appendChild(totalKillsCell);

                const booyahCell = document.createElement('td');
                booyahCell.textContent = teamData[team].booyah;
                row.appendChild(booyahCell);

                tableBody.appendChild(row);
            });
        }
    </script>
</body>
</html>
